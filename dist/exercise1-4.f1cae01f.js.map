{"version":3,"sources":["components/stage/stage.js","exercise1-4.js"],"names":["Stage","canvasElement","canvas","ctx","getContext","animating","onResize","bind","render","width","clientWidth","height","clientHeight","delta","onUpdate","update","requestAnimationFrame","setStageSize","window","addEventListener","_ctx","value","_onUpdate","stage","document","querySelector","init","values","Array","fill","options","querySelectorAll","pickNumber","exp","r1","Math","random","r2","makeUpdateFn","exponent","index","round","forEach","val","i","fillRect","opt","checked","e","clearRect","map","v"],"mappings":"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","file":"exercise1-4.f1cae01f.js","sourceRoot":"../src","sourcesContent":["class Stage {\n  constructor(canvasElement) {\n    this.canvas = canvasElement;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.animating = true;\n\n    this.onResize = this.onResize.bind(this);\n    this.render = this.render.bind(this);\n  }\n\n  setStageSize() {\n    this.canvas.width = this.canvas.clientWidth;\n    this.canvas.height = this.canvas.clientHeight;\n  }\n\n  update(delta) {\n    if (this.onUpdate) {\n      this.onUpdate(delta);\n    }\n  }\n\n  render(delta) {\n    if (!delta) delta = 0;\n    this.update(delta);\n    if (this.animating) requestAnimationFrame(this.render);\n  }\n\n  onResize() {\n    this.setStageSize();\n    this.update();\n  }\n\n  init() {\n    this.setStageSize();\n    this.render();\n    window.addEventListener(\"resize\", this.onResize);\n  }\n\n  get ctx() {\n    return this._ctx;\n  }\n\n  set ctx(value) {\n    this._ctx = value;\n  }\n\n  get onUpdate() {\n    return this._onUpdate || null;\n  }\n\n  set onUpdate(value) {\n    this._onUpdate = value;\n  }\n}\n\nexport default Stage;\n","import Stage from \"./components/stage/stage\";\n\n// --------------\n// initialization\n// --------------\nconst stage = new Stage(document.querySelector(\"#canvas\"));\nconst ctx = stage.ctx;\nstage.init();\n\n// --------------\n// exercise code\n// --------------\n\n// Custom distribution of random numbers\n// I'm just creating an array of length equal to pixel-width of the canvas,\n// then randomly picking which index to increment, based on a condition.\n\nconst width = ctx.canvas.width;\nconst height = ctx.canvas.height;\nlet values = Array(width).fill(0);\n\nconst options = [...document.querySelectorAll(\"input\")];\n\nconst pickNumber = (exp) => {\n  // first we'll generate two random numbers between 0 and 1,\n  // and plug r1 into our distribution equation (y = x^2, for example).\n  const r1 = Math.random();\n  const r2 = Math.random();\n  const y = r1 ** exp;\n\n  // if r2 is less than the result of that first equation,\n  // then that means r1 is a contender, and gets to LIVE!\n  if (r2 < y) {\n    return r1;\n  }\n\n  // if not, try again.\n  return pickNumber(exp);\n};\n\n// basically a \"reset\" for stage.onUpdate,\n// because we need to pass a new exponent whenever it changes.\nconst makeUpdateFn = (exponent) => {\n  return (delta) => {\n    const index = Math.round(pickNumber(exponent) * width);\n    values[index]++;\n\n    values.forEach((val, i) => {\n      const value = val * 40;\n      ctx.fillRect(i, height - value, 1, value);\n    });\n  };\n};\n\noptions.forEach((opt, i) => {\n  // initializer\n  if (opt.checked) {\n    const exponent = i + 1;\n    stage.onUpdate = makeUpdateFn(exponent);\n  }\n\n  opt.addEventListener(\"change\", function handleClick(e) {\n    if (this.checked) {\n      const exponent = i + 1;\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      values = values.map((v) => 0);\n      stage.onUpdate = makeUpdateFn(exponent);\n    }\n  });\n});\n"]}